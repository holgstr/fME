% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FME.R
\name{fme}
\alias{fme}
\title{Computes FMEs.}
\usage{
fme(
  model,
  data,
  features,
  ep.method = "none",
  compute.nlm = FALSE,
  nlm.intervals = 1
)
}
\arguments{
\item{model}{The (trained) model, with the ability to predict on new data. This must be a \code{train.formula} (\code{tidymodels}), \code{Learner} (\code{mlr3}), \code{train} (\code{caret}), \code{lm} or \code{glm} object.}

\item{data}{The data used for computing FMEs, must be data.frame or data.table.}

\item{features}{A named list with the feature name(s) and step size(s). The list names should correspond to the names of the feature variables affected by the step.
The list can contain either 1 or 2 numeric features, or 1 categorical feature.
Numeric features must have a number as step size, categorical features the name of the reference category.}

\item{ep.method}{String specifying the method used for extrapolation detection. One of \code{"none"} or \code{"envelope"}. Defaults to \code{"none"}.}

\item{compute.nlm}{Compute NLMs for FMEs for numerical steps. Defaults to \code{FALSE}.}

\item{nlm.intervals}{Number of intervals for computing NLMs. Results in longer computing time but more accurate approximation of NLMs. Defaults to \code{1}.}
}
\value{
\code{ForwardsMarginalEffect} object. The field \verb{$results} contains a \code{data.table} with the individual FMEs (and NLMs, if applicable) for all observations that are not extrapolation points.
The field \verb{$data.step} contains the feature matrix after the step has been applied. Aggregations of observation-wise FMEs and NLMs are contained in \verb{$ame} and \verb{$anlm}.
}
\description{
This is a wrapper function for \code{FME$new(...)$compute()}.
It computes forward marginal effects (FMEs) for a specified change in feature values.
}
\details{
If one or more numeric features are passed to the \code{features} argument, FMEs are computed as FME_{x^{(i)}, h} = f(x^{(i)} + h) - f(x^{(i)}).
}
\examples{
# Train a model:

library(mlr3verse)
library(ranger)
data(bikes, package = "fmeffects")
forest = lrn("regr.ranger")$train(as_task_regr(x = bikes, target = "count"))

# Compute FMEs for a numerical feature:
effects = fme(model = forest, data = bikes, features = list("temp" = 1), ep.method = "envelope")

# Analyze results:
summary(effects)
plot(effects)

# Extract results:
effects$results

# Compute the AME for a categorial feature:
fme(model = forest, data = bikes, features = list("weather" = "rain"))$ame
}
\references{
Scholbeck, C.A., Casalicchio, G., Molnar, C. et al. Marginal effects for non-linear prediction functions. Data Min Knowl Disc (2024). https://doi.org/10.1007/s10618-023-00993-x
}
